using EllipticCurve.Helpers;
using EllipticCurve.Managers;
using EllipticCurve.Models;
using NUnit.Framework;
using Integer = System.Numerics.BigInteger;

namespace EllipticCurveTest
{
    public class ZpCurveManagerTests
    {
        [Test]
        [TestCase(null, null, 1L, 0L, 1L, 0L)]
        [TestCase(1L, 2L, 1L, -2L, null, null)]
        [TestCase(1L, 0L, 1L, 0L, null, null)]
        [TestCase(1L, 2L, 2L, 1L, 1, 1)]
        [TestCase(1L, 2L, 1L, 2L, 2, 2)]
        public void TestAdd(long? x1, long? y1, long? x2, long? y2, long? x, long? y)
        {
            var manager = new ZpCurveOperationManager(3, -1, 3);
            var left = new Point<Integer?>(x1, y1);
            var right = new Point<Integer?>(x2, y2);
            var expectedResult = new Point<Integer?>(x, y);

            var result = manager.Add(left, right);
            
            Assert.AreEqual(expectedResult, result);
        }
        
        [Test]
        [TestCase(null, null, 1, null, null)]
        [TestCase(1L, 2L, 1, 1L, 2L)]
        [TestCase(1L, 2L, 2, 2, 2)]
        public void TestMul(long? x1, long? y1, int k, long? x, long? y)
        {
            var manager = new ZpCurveOperationManager(3, -1, 3);
            var left = new Point<Integer?>(x1, y1);
            var expectedResult = new Point<Integer?>(x, y);

            var result = manager.Multiple(left, k);
            
            Assert.AreEqual(expectedResult, result);
        }
        
        [Test]
        [TestCase("2", "1362138308511466522361153706999924933599454966107597910086607881313301390679204654798639248640660900363360053616481", "21933325650940841369538204578070064804451893403314136885642470114978241170633179043576249504748352841115137159204480")]
        [TestCase("3", "1150902892488483458936980703033240421996917307006362560128741616924334451190275252566486993672663650518120360101937", "31026896179475916024120184231935979451435829475766013456640577102369059008378103381483562093497986423351518602141169")]
        [TestCase("4", "3002719260124138234864644293005553694107074621611323149430212532410635475904301642043243286192603916432052661917749", "31212625517239818344942812004487160470862995565736342725949902243255222118943617085729083408956085866876436550315367")]
        [TestCase("5", "2750097886727221852871437489830375535902219297598792969027200942344246907638882141082920203987932105239591664846012", "22109872175543161315473274033501382113217372000035529196852092508530348707813916169793617815529384830733840621334842")]
        [TestCase("6", "15158061413379800065538248493105902144697876778848367452125464871443609651151271322845514729956502261224296802534879", "1456421203869220836818514483833972558040283856785775367907417308863650512182437695714129960394237275553647337470260")]
        [TestCase("7", "6192706248650610585029334828875625541601599068644432283392070678800109693834576236172166289842521288047764778176737", "22850101761352155756627808478921273213930354190738002589669451013939984415721476662192719117631561703668728764493708")]
        [TestCase("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942642", "26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087", "31076295234905449226732288810623505625791886221604131073239087501765218571612451104608622327865990668783520461484448")]
        [TestCase("20", "14826877563751721527642987815462466727895757112187978564441407718647546778973377063169333404744906239575483302437439", "12520509187387997783531026606379760689102973303292888459234723469235834532380971309821497924448158044301665030958813")]
        [TestCase("50", "26872871157512266249793314403815441213358640955506791212006829276370603298044898950948980910539506951297018170335447", "15223957831115668372451717441650956518518673208441808351921676039032303889577095874533234777126440887778876709829705")]
        [TestCase("2000", "8288559450980822256261769472214267993073022891795560720746214041489085510875998890316908409299541769193894668540637", "15240478466256791605358780521987820048571442664898944136206213506619706575514154963189332113914965732976443228962230")]
        [TestCase("1000", "6095129518569365160805201704943709729922302445321289134209606244630599099111039677404723770482645868843443820854231", 
        "23155358023125676497813639640188377411255018691677149213323450617726661088102385806435697814607903413705247051556557")]
        [TestCase("500", "13658173404802800316001251564275373360585142453754963358309465335068961838372950369189789969005373004968845770332517", "14830914037084801624788212463172263501658608574716918032979007910785583907265751225184145161645495379160764965437919")]
        [TestCase("250", "1797310854242307905808461948157348115069468003180561742513643728683964366170951380884257696260335089559668824579481", "21455032830238054452304979955948628422057776590259373344020489432289851813310475671101267881355602462702458451532920")]
        [TestCase("100", "25977507948687764912854137330653638254957540671419763269565670838333548975477988437309036566153010476660523227685367", "6985354047035031913734269507517635175822686076882450655861058029466855309918124103755340168249110841360731657361429")]
        [TestCase("400", "31880069982918071447436878452988945461785931552133921484329594026117329166729490020492277642738300830924471296754049", "9287978310575722921369332802526165334991422659935490218547554948692789523258010666288406085737885457406399988450140")]
        [TestCase("300", "9816438242012269151486462605194059915135666902116503628687751031148443971262656946289618783214059790399011845407641", "29950005492855478206672499804002959885515537079315780191396169208491363382326004148020824261692867192949673980829962")]
        [TestCase("275", "25580769568288408529366476757531584988352374901484785455307229784295173010539886038660533285470931757228010675460724", "16145625781287742805514552597683739153508653682212224521393429204493518948099678297035231311476938743417404915195023")]
        [TestCase("263", "11414099378356649303956801709974130671231060323426671813800708713916354388707185806488692380683017996085076323505775", "13716740417617121139666133902951620316211509268030664908031156869146841599488917051864221019254879268408582148880152")]
        [TestCase("270", "20468482951796368517573683262562338226995710406788714142669413937178385882752729471617143446575832495132870941309295", "21729622324310635779246823517140877433089940878357624319239323718181380900033835426510268967911035942548475000261940")] 
        [TestCase("267", "11581145275662021602355883312295546222625732017548293125619912008999934787404594379783530196857752934353846464709587", "28670843623638557637960635415849791648886247028902413046580644761716936160096502069887641274835467303393654831968697")]
        [TestCase("268", "6931332006929160531189750233467683831652903544862774484118930204436184524531335855149460637719475668616259730710894", "37710385431286894844739364533780473250279121977177500534392611412661578760780992928268817345034471101522182923456860")]
        [TestCase("269", "30645501249575682170097436987045294986681394025705180061881393552519282743231653314611583455613329062143896300790978", "7034342092109474854281519801493119932714557796215952773872051499836322463979093040205411825263905508276568278144115")]
        public void TestBigMul(string k, string x, string y)
        {
            var x1 = "26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087";
            var y1 = "8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871";
            var x1Parsed = Integer.Parse(x1);
            var y1Parsed = Integer.Parse(y1);
            var kParsed = Integer.Parse(k);
            var xParsed = Integer.Parse(x);
            var yParsed = Integer.Parse(y);

            var p = Integer.Parse(
                "39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319");
            var a = Integer.Parse("-3");
            var changed = IoHelper.ChangeNotationToDecimal
            ("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef");
            var b = Integer.Parse(changed);
            var manager = new ZpCurveOperationManager(p, a, b);
            var left = new Point<Integer?>(x1Parsed, y1Parsed);
            var expectedResult = new Point<Integer?>(xParsed, yParsed);

            var result = manager.Multiple(left, kParsed);
            
            Assert.AreEqual(expectedResult, result);
        }
    }
}